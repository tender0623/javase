两种实现方式的比较
thread:
   优点:编写简单,如果需要访问当前线程,则无需使用Thread.currentThread()方法.直接使用this即可获得当前线程
   缺点:线程类已经继承了Thread类,不能再继承其他父类

Runnable:
    优点:线程类只是实现了Runnable接口或则Callable接口,还可以继承其他类.在这种方式下,多个线程可以共享同一个target对象,所以非常适合多个相同线程处理
         同一份资源的情况,从而可以将CPU,代码和数据分开,形成清晰的模型,较好地体现了面向对象思想
    缺点:编程稍微复杂,如果要访问当前线程,则必须使用Thread.currentThead()方法
---------------------------------------------------------------------------------
线程的方法
 Thread.currentThread()
获取当前正在执行的线程实例
Thread.sleep(毫秒值时长)
当前线程暂停指定的毫秒值时长
Thread.yield()
让步，主动放弃 cpu 时间片，让给其他线程执行
getName(), setName()
start()
启动线程,线程启动后,并行执行run()方法中的代码
interrupt()
打断另一个线程的暂停状态,被打断的线程,会出现InterruptedException
join()
当前线程暂停,等待被调用的线程接收后,再继续执行
a线程 -------------------------
b线程 ---------|                 |------------
               a.join()
setDaemon(true)
后台线程、守护线程
JVM虚拟机退出条件，是所有前台线程结束，当所有前台线程结束，虚拟机会自动退出
不会等待后台线程结束
      例如：垃圾回收器是一个后台线程
getPriority(), setPriority()
优先级,1到10,默认是5
-----------------------------------------------------------
线程同步
线程同步 synchronized
让多个线程共享访问数据时，步调一致的执行。
一个线程修改时，其他线程等待修改完成后才能执行；
一个线程访问时，其他线程等待访问结束

任何实例，都有一个“同步锁”，synchronized 关键字，要求一个线程必须抢到同步锁才能执行

synchronized(对象) {

    共享的数据访问代码

}
必须抢到指定对象的锁，才能执行
synchronized void f() {

}
抢当前实例（this）的锁

static synchronized void f() {
}
抢类的锁

使用synchronized时,考虑一下两点:
l  抢哪个对象
l  哪段代码是在修改/访问数据
synchronized效率低
l  为了保证线程安全,必须牺牲性能,降低效率
l  尽量锁定越少的代码越好
